name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build_project:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install .NET SDK 9.0
        run: |
          sudo add-apt-repository ppa:dotnet/backports
          sudo apt-get update
          sudo apt-get install -y dotnet-sdk-9.0

      - name: Restore dependencies
        run: dotnet restore

      - name: Build the .NET project
        run: dotnet build --configuration Release --no-restore --no-incremental

  build_image:
    runs-on: self-hosted
    needs: build_project

    steps:
      - name: Build Docker image
        run: docker build -t sakthisiddu1/aspnet-docker:${{ github.run_number }} .

  push_image:
    runs-on: self-hosted
    needs: build_image

    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: docker push sakthisiddu1/aspnet-docker:${{ github.run_number }}

  deploy:
    runs-on: self-hosted
    needs: push_image

    steps:
      - name: Create Deployment and Service YAML files
        run: |
          echo "
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: aspnet-deployment
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: aspnet
            template:
              metadata:
                labels:
                  app: aspnet
              spec:
                containers:
                - name: aspnet
                  image: sakthisiddu1/aspnet-docker:${{ github.run_number }}
                  ports:
                  - containerPort: 80
          " > deployment.yaml

          echo "
          apiVersion: v1
          kind: Service
          metadata:
            name: aspnet-service
          spec:
            type: NodePort
            selector:
              app: aspnet
            ports:
              - protocol: TCP
                port: 80
                targetPort: 80
                nodePort: 30007
          " > service.yaml

      - name: Deploy to Kubernetes
        run: |
          ssh -o StrictHostKeyChecking=no -i /home/ubuntu/.ssh/test.pem ubuntu@13.235.243.140 "kubectl apply -f -" < deployment.yaml
          ssh -o StrictHostKeyChecking=no -i /home/ubuntu/.ssh/test.pem ubuntu@13.235.243.140 "kubectl apply -f -" < service.yaml