name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build_project:
    runs-on: self-hosted
    steps:
      steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Install .NET SDK 6.0 (or other version as required)
        run: |
          # Add Microsoft's GPG key
          wget https://packages.microsoft.com/keys/microsoft.asc
          sudo apt-key add microsoft.asc
          
          # Add the Microsoft package repository
          wget https://packages.microsoft.com/config/ubuntu/20.04/prod.list
          sudo mv prod.list /etc/apt/sources.list.d/microsoft-prod.list

          # Update package index and install the .NET SDK
          sudo apt-get update
          sudo apt-get install -y dotnet-sdk-6.0  # Use the version suitable for your project

      - name: Restore dependencies
        run: dotnet restore

      - name: Build the .NET project
        run: dotnet build --configuration Release

  build_image:
    runs-on: self-hosted
    needs: build_project
    steps:
      - name: Build Docker image
        run: docker build . -t sakthisiddu1/aspnet-docker:${{ github.run_number }}

  push_image:
    runs-on: self-hosted
    needs: build_image
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Push Docker image
        run: docker push sakthisiddu1/aspnet-docker:${{ github.run_number }}

  deploy:
    runs-on: self-hosted
    needs: push_image
    steps:
      - name: Prepare deployment.yaml
        run: |
          echo "
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: my-app
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: my-app
            template:
              metadata:
                labels:
                  app: my-app
              spec:
                containers:
                - name: my-app
                  image: sakthisiddu1/aspnet-docker:${{ github.run_number }}
                  ports:
                  - containerPort: 80
          " > deployment.yaml
      - name: Prepare service.yaml
        run: |
          echo "
          apiVersion: v1
          kind: Service
          metadata:
            name: my-app-service
          spec:
            type: NodePort
            selector:
              app: my-app
            ports:
              - port: 80
                nodePort: 30007
          " > service.yaml
      - name: Deploy to Kubernetes
        run: |
          ssh -o StrictHostKeyChecking=no -i /home/ubuntu/.ssh/test.pem ubuntu@15.206.160.201 "kubectl apply -f -" < deployment.yaml
          ssh -i /home/ubuntu/.ssh/test.pem -o StrictHostKeyChecking=no ubuntu@15.206.160.201 "kubectl apply -f -" < service.yaml